import threading
import time


class Knight(threading.Thread):
    total_enemies = 100
    def __init__(self, name: str, power: int):
        super().__init__()
        self.name = name
        self.power = power
        self.days = 0

    def run(self):
        print(f"{self.name}, на нас напали!")

        while Knight.total_enemies > 0:
            time.sleep(1)  # Задержка в 1 секунду (1 день)
            Knight.total_enemies -= self.power
            self.days += 1

            if Knight.total_enemies < 0:
                Knight.total_enemies = 0

            print(f"{self.name} сражается {self.days}..., осталось {Knight.total_enemies} воинов.")

        print(f"{self.name} одержал победу спустя {self.days} дней(дня)!")


# Создание и запуск потоков
knight1 = Knight(name="Рыцарь Артур", power=30)
knight2 = Knight(name="Рыцарь Ланселот", power=50)

knight1.start()
knight2.start()

# Ожидание завершения обоих потоков

knight2.join()
knight1.join()
#Создайте класс Knight, наследованный от Thread, объекты которого будут обладать следующими свойствами:
#Атрибут name - имя рыцаря. (str)
#Атрибут power - сила рыцаря. (int)
#А также метод run, в котором рыцарь будет сражаться с врагами:
#При запуске потока должна выводится надпись "<Имя рыцаря>, на нас напали!".
#Рыцарь сражается до тех пор, пока не повергнет всех врагов (у всех потоков их 100).
#В процессе сражения количество врагов уменьшается на power текущего рыцаря.
#По прошествию 1 дня сражения (1 секунды) выводится строка ("<Имя рыцаря> сражается <кол-во дней>..., "
#                                                          "осталось <кол-во воинов> воинов.")
#После победы над всеми врагами выводится надпись "<Имя рыцаря> одержал победу спустя <кол-во дней> дней(дня)!"
#Как можно заметить нужно сделать задержку в 1 секунду, инструменты для задержки выберите сами.
#Пункты задачи:
#Создайте класс Knight с соответствующими описанию свойствами.
#Создайте и запустите 2 потока на основе класса Knight.
#Выведите на экран строку об окончании битв.